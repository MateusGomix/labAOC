// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/30/2023 14:52:51"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          cpu
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cpu_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock50;
reg [17:0] entrada;
reg inserir;
// wires                                               
wire ck;
wire [31:0] dado1;
wire [31:0] dado2;
wire [31:0] dado3e;
wire [31:0] dado3s;
wire [27:0] displaysSeg;
wire [27:0] displaysSegPC;
wire [4:0] endRD;
wire [31:0] entradaAlu2;
wire [31:0] entradaDados;
wire [31:0] escritaBanco;
wire [31:0] instAtual;
wire mw;
wire [31:0] saidaDados;
wire wr;

// assign statements (if any)                          
cpu i1 (
// port map - connection between master ports and signals/registers   
	.ck(ck),
	.clock50(clock50),
	.dado1(dado1),
	.dado2(dado2),
	.dado3e(dado3e),
	.dado3s(dado3s),
	.displaysSeg(displaysSeg),
	.displaysSegPC(displaysSegPC),
	.endRD(endRD),
	.entrada(entrada),
	.entradaAlu2(entradaAlu2),
	.entradaDados(entradaDados),
	.escritaBanco(escritaBanco),
	.inserir(inserir),
	.instAtual(instAtual),
	.mw(mw),
	.saidaDados(saidaDados),
	.wr(wr)
);
initial 
begin 
#7000000 $finish;
end 

// clock50
always
begin
	clock50 = 1'b0;
	clock50 = #10000 1'b1;
	#10000;
end 
// entrada[ 17 ]
initial
begin
	entrada[17] = 1'b0;
end 
// entrada[ 16 ]
initial
begin
	entrada[16] = 1'b0;
end 
// entrada[ 15 ]
initial
begin
	entrada[15] = 1'b0;
end 
// entrada[ 14 ]
initial
begin
	entrada[14] = 1'b0;
end 
// entrada[ 13 ]
initial
begin
	entrada[13] = 1'b0;
end 
// entrada[ 12 ]
initial
begin
	entrada[12] = 1'b0;
end 
// entrada[ 11 ]
initial
begin
	entrada[11] = 1'b0;
end 
// entrada[ 10 ]
initial
begin
	entrada[10] = 1'b0;
end 
// entrada[ 9 ]
initial
begin
	entrada[9] = 1'b0;
end 
// entrada[ 8 ]
initial
begin
	entrada[8] = 1'b0;
end 
// entrada[ 7 ]
initial
begin
	entrada[7] = 1'b0;
end 
// entrada[ 6 ]
initial
begin
	entrada[6] = 1'b0;
end 
// entrada[ 5 ]
initial
begin
	entrada[5] = 1'b0;
end 
// entrada[ 4 ]
initial
begin
	entrada[4] = 1'b0;
end 
// entrada[ 3 ]
initial
begin
	entrada[3] = 1'b0;
end 
// entrada[ 2 ]
initial
begin
	entrada[2] = 1'b0;
end 
// entrada[ 1 ]
initial
begin
	entrada[1] = 1'b0;
end 
// entrada[ 0 ]
initial
begin
	entrada[0] = 1'b0;
end 

// inserir
initial
begin
	inserir = 1'b1;
end 
endmodule

